{
  "_from": "less-loader",
  "_id": "less-loader@6.2.0",
  "_inBundle": false,
  "_integrity": "sha512-Cl5h95/Pz/PWub/tCBgT1oNMFeH1WTD33piG80jn5jr12T4XbxZcjThwNXDQ7AG649WEynuIzO4b0+2Tn9Qolg==",
  "_location": "/less-loader",
  "_phantomChildren": {
    "@types/json-schema": "7.0.5",
    "ajv-keywords": "3.4.1",
    "big.js": "5.2.2",
    "emojis-list": "3.0.0",
    "fast-json-stable-stringify": "2.1.0",
    "minimist": "1.2.5",
    "uri-js": "4.2.2"
  },
  "_requested": {
    "escapedName": "less-loader",
    "fetchSpec": "latest",
    "name": "less-loader",
    "raw": "less-loader",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/less-loader/-/less-loader-6.2.0.tgz",
  "_shasum": "8b26f621c155b342eefc24f5bd6e9dc40c42a719",
  "_spec": "less-loader",
  "_where": "/Users/night/go/src/web-chat",
  "author": {
    "name": "Johannes Ewald @jhnns"
  },
  "bugs": {
    "url": "https://github.com/webpack-contrib/less-loader/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "clone": "^2.1.2",
    "less": "^3.11.3",
    "loader-utils": "^2.0.0",
    "schema-utils": "^2.7.0"
  },
  "deprecated": false,
  "description": "A Less loader for webpack. Compiles Less to CSS.",
  "devDependencies": {
    "@babel/cli": "^7.10.4",
    "@babel/core": "^7.10.4",
    "@babel/preset-env": "^7.10.4",
    "@commitlint/cli": "^9.0.1",
    "@commitlint/config-conventional": "^9.0.1",
    "@webpack-contrib/defaults": "^6.3.0",
    "@webpack-contrib/eslint-config-webpack": "^3.0.0",
    "babel-jest": "^26.1.0",
    "cross-env": "^7.0.2",
    "del": "^5.1.0",
    "del-cli": "^3.0.1",
    "eslint": "^7.3.1",
    "eslint-config-prettier": "^6.11.0",
    "eslint-plugin-import": "^2.22.0",
    "eslint-plugin-prettier": "^3.1.4",
    "husky": "^4.2.5",
    "inspect-loader": "^1.0.0",
    "jest": "^26.1.0",
    "lint-staged": "^10.2.11",
    "memfs": "^3.2.0",
    "npm-run-all": "^4.1.5",
    "prettier": "^2.0.5",
    "standard-version": "^8.0.0",
    "strip-ansi": "^6.0.0",
    "webpack": "^4.43.0"
  },
  "engines": {
    "node": ">= 10.13.0"
  },
  "files": [
    "dist"
  ],
  "funding": {
    "type": "opencollective",
    "url": "https://opencollective.com/webpack"
  },
  "homepage": "https://github.com/webpack-contrib/less-loader",
  "keywords": [
    "css",
    "less",
    "less.js",
    "lesscss",
    "loader",
    "preprocessor",
    "webpack"
  ],
  "license": "MIT",
  "main": "dist/cjs.js",
  "name": "less-loader",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": "^4.0.0 || ^5.0.0"
  },
  "readme": "<div align=\"center\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\" src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![cover][cover]][cover-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# less-loader\n\nA Less loader for webpack. Compiles Less to CSS.\n\n## Getting Started\n\nTo begin, you'll need to install `less-loader`:\n\n```console\n$ npm install less-loader --save-dev\n```\n\nThen add the loader to your `webpack` config. For example:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        loader: 'less-loader', // compiles Less to CSS\n      },\n    ],\n  },\n};\n```\n\nAnd run `webpack` via your preferred method.\n\n## Options\n\n|                  Name                   |         Type         |         Default          | Description                                      |\n| :-------------------------------------: | :------------------: | :----------------------: | :----------------------------------------------- |\n|    **[`lessOptions`](#lessoptions)**    | `{Object\\|Function}` | `{ relativeUrls: true }` | Options for Less.                                |\n|    **[`prependData`](#prependdata)**    | `{String\\|Function}` |       `undefined`        | Prepends Less code before the actual entry file. |\n|     **[`appendData`](#appenddata)**     | `{String\\|Function}` |       `undefined`        | Prepends Less code after the actual entry file.  |\n|      **[`sourceMap`](#sourcemap)**      |     `{Boolean}`      |    `compiler.devtool`    | Enables/Disables generation of source maps.      |\n| **[`implementation`](#implementation)** |      `{Object}`      |          `less`          | Setup Less implementation to use.                |\n\n### `lessOptions`\n\nType: `Object|Function`\nDefault: `{ relativeUrls: true }`\n\nYou can pass any Less specific options to the `less-loader` through the `lessOptions` property in the [loader options](https://webpack.js.org/configuration/module/#rule-options-rule-query). See the [Less documentation](http://lesscss.org/usage/#command-line-usage-options) for all available options in dash-case. Since we're passing these options to Less programmatically, you need to pass them in camelCase here:\n\n#### `Object`\n\nUse an object to pass options through to Less.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        use: [\n          {\n            loader: 'style-loader',\n          },\n          {\n            loader: 'css-loader',\n          },\n          {\n            loader: 'less-loader',\n            options: {\n              lessOptions: {\n                strictMath: true,\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### `Function`\n\nAllows setting the options passed through to Less based off of the loader context.\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        use: [\n          'style-loader',\n          'css-loader',\n          {\n            loader: 'less-loader',\n            options: {\n              lessOptions: (loaderContext) => {\n                // More information about available properties https://webpack.js.org/api/loaders/\n                const { resourcePath, rootContext } = loaderContext;\n                const relativePath = path.relative(rootContext, resourcePath);\n\n                if (relativePath === 'styles/foo.less') {\n                  return {\n                    paths: ['absolute/path/c', 'absolute/path/d'],\n                  };\n                }\n\n                return {\n                  paths: ['absolute/path/a', 'absolute/path/b'],\n                };\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `prependData`\n\nType: `String|Function`\nDefault: `undefined`\n\nPrepends `Less` code before the actual entry file.\n\nThis is especially useful when some of your Less variables depend on the environment:\n\n> ℹ Since you're injecting code, this will break the source mappings in your entry file. Often there's a simpler solution than this, like multiple Less entry files.\n\n#### `String`\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        use: [\n          'style-loader',\n          'css-loader',\n          {\n            loader: 'less-loader',\n            options: {\n              prependData: `@env: ${process.env.NODE_ENV};`,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### `Function`\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        use: [\n          'style-loader',\n          'css-loader',\n          {\n            loader: 'less-loader',\n            options: {\n              prependData: (loaderContext) => {\n                // More information about available properties https://webpack.js.org/api/loaders/\n                const { resourcePath, rootContext } = loaderContext;\n                const relativePath = path.relative(rootContext, resourcePath);\n\n                if (relativePath === 'styles/foo.less') {\n                  return '@value: 100px;';\n                }\n\n                return '@value: 200px;';\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `appendData`\n\nType: `String|Function`\nDefault: `undefined`\n\nAppendData `Less` code after the actual entry file.\n\nThis can be useful when you need to rewrite some of your Less variables.:\n\n> ℹ Since you're injecting code, this will break the source mappings in your entry file. Often there's a simpler solution than this, like multiple Less entry files.\n\n#### `String`\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        use: [\n          'style-loader',\n          'css-loader',\n          {\n            loader: 'less-loader',\n            options: {\n              appendData: `@env: ${process.env.NODE_ENV};`,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### `Function`\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        use: [\n          'style-loader',\n          'css-loader',\n          {\n            loader: 'less-loader',\n            options: {\n              appendData: (loaderContext) => {\n                // More information about available properties https://webpack.js.org/api/loaders/\n                const { resourcePath, rootContext } = loaderContext;\n                const relativePath = path.relative(rootContext, resourcePath);\n\n                if (relativePath === 'styles/foo.less') {\n                  return '@value: 100px;';\n                }\n\n                return '@value: 200px;';\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `sourceMap`\n\nType: `Boolean`\nDefault: depends on the `compiler.devtool` value\n\nBy default generation of source maps depends on the [`devtool`](https://webpack.js.org/configuration/devtool/) option. All values enable source map generation except `eval` and `false` value.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/i,\n        use: [\n          'style-loader',\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n          {\n            loader: 'less-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `implementation`\n\nType: `Object`\nDefault: `less`\n\n> ⚠ less-loader compatible with Less version 3 only\n\nThe special `implementation` option determines which implementation of Less to use.\nThe `implementation` options either accepts `less` as a module.\nThis is useful if you want to use Less with a smaller version. Do not forget that then you must install your own version of Less.\n\nFor example, to use custom Less implementation, you'd pass:\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        use: [\n          'style-loader',\n          'css-loader',\n          {\n            loader: 'less-loader',\n            options: {\n              implementation: require('less'),\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n## Examples\n\n### Normal usage\n\nChain the `less-loader` with the [`css-loader`](https://github.com/webpack-contrib/css-loader) and the [`style-loader`](https://github.com/webpack-contrib/style-loader) to immediately apply all styles to the DOM.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        use: [\n          {\n            loader: 'style-loader', // creates style nodes from JS strings\n          },\n          {\n            loader: 'css-loader', // translates CSS into CommonJS\n          },\n          {\n            loader: 'less-loader', // compiles Less to CSS\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\nUnfortunately, Less doesn't map all options 1-by-1 to camelCase. When in doubt, [check their executable](https://github.com/less/less.js/blob/3.x/bin/lessc) and search for the dash-case option.\n\n### Source maps\n\nTo enable sourcemaps for CSS, you'll need to pass the `sourceMap` property in the loader's options. If this is not passed, the loader will respect the setting for webpack source maps, set in `devtool`.\n\n**webpack.config.js**\n\n```javascript\nmodule.exports = {\n  devtool: 'source-map', // any \"source-map\"-like devtool is possible\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        use: [\n          'style-loader',\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n          {\n            loader: 'less-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\nIf you want to edit the original Less files inside Chrome, [there's a good blog post](https://medium.com/@toolmantim/getting-started-with-css-sourcemaps-and-in-browser-sass-editing-b4daab987fb0). The blog post is about Sass but it also works for Less.\n\n### In production\n\nUsually, it's recommended to extract the style sheets into a dedicated file in production using the [MiniCssExtractPlugin](https://github.com/webpack-contrib/mini-css-extract-plugin). This way your styles are not dependent on JavaScript.\n\n### Imports\n\nStarting with `less-loader` 4, you can now choose between Less' builtin resolver and webpack's resolver. By default, webpack's resolver is used.\n\n#### webpack resolver\n\nwebpack provides an [advanced mechanism to resolve files](https://webpack.js.org/configuration/resolve/). The `less-loader` applies a Less plugin that passes all queries to the webpack resolver. Thus you can import your Less modules from `node_modules`. Just prepend them with a `~` which tells webpack to look up the [`modules`](https://webpack.js.org/configuration/resolve/#resolve-modules).\n\n```css\n@import '~bootstrap/less/bootstrap';\n```\n\nIt's important to only prepend it with `~`, because `~/` resolves to the home-directory. webpack needs to distinguish between `bootstrap` and `~bootstrap`, because CSS and Less files have no special syntax for importing relative files. Writing `@import \"file\"` is the same as `@import \"./file\";`\n\n##### Non-Less imports\n\nUsing webpack's resolver, you can import any file type. You just need a loader that exports valid Less code. Often, you will also want to set the `issuer` condition to ensure that this rule is only applied on imports originating from Less files:\n\n```js\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        issuer: /\\.less$/,\n        use: [\n          {\n            loader: 'js-to-less-loader',\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### Less resolver\n\nIf you specify the `paths` option, modules will be searched in the given `paths`. This is Less' default behavior. `paths` should be an array with absolute paths:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        use: [\n          {\n            loader: 'style-loader',\n          },\n          {\n            loader: 'css-loader',\n          },\n          {\n            loader: 'less-loader',\n            options: {\n              lessOptions: {\n                paths: [path.resolve(__dirname, 'node_modules')],\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### Plugins\n\nIn order to use [plugins](http://lesscss.org/usage/#plugins), simply set the\n`plugins` option like this:\n\n```js\n// webpack.config.js\nconst CleanCSSPlugin = require('less-plugin-clean-css');\n\nmodule.exports = {\n  ...\n    {\n      loader: 'less-loader',\n      options: {\n        lessOptions: {\n          plugins: [\n            new CleanCSSPlugin({ advanced: true }),\n          ],\n        },\n      },\n    },\n  ...\n};\n```\n\n### Extracting style sheets\n\nBundling CSS with webpack has some nice advantages like referencing images and fonts with hashed urls or [hot module replacement](https://webpack.js.org/concepts/hot-module-replacement/) in development. In production, on the other hand, it's not a good idea to apply your style sheets depending on JS execution. Rendering may be delayed or even a [FOUC](https://en.wikipedia.org/wiki/Flash_of_unstyled_content) might be visible. Thus it's often still better to have them as separate files in your final production build.\n\nThere are two possibilities to extract a style sheet from the bundle:\n\n- [`extract-loader`](https://github.com/peerigon/extract-loader) (simpler, but specialized on the css-loader's output)\n- [MiniCssExtractPlugin](https://github.com/webpack-contrib/mini-css-extract-plugin) (more complex, but works in all use-cases)\n\n### CSS modules gotcha\n\nThere is a known problem with Less and [CSS modules](https://github.com/css-modules/css-modules) regarding relative file paths in `url(...)` statements. [See this issue for an explanation](https://github.com/webpack-contrib/less-loader/issues/109#issuecomment-253797335).\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/less-loader.svg\n[npm-url]: https://npmjs.com/package/less-loader\n[node]: https://img.shields.io/node/v/less-loader.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack-contrib/less-loader.svg\n[deps-url]: https://david-dm.org/webpack-contrib/less-loader\n[tests]: https://github.com/webpack-contrib/less-loader/workflows/less-loader/badge.svg\n[tests-url]: https://github.com/webpack-contrib/less-loader/actions\n[cover]: https://codecov.io/gh/webpack-contrib/less-loader/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/less-loader\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.now.sh/badge?p=less-loader\n[size-url]: https://packagephobia.now.sh/result?p=less-loader\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack-contrib/less-loader.git"
  },
  "scripts": {
    "build": "cross-env NODE_ENV=production babel src -d dist --copy-files",
    "clean": "del-cli dist",
    "commitlint": "commitlint --from=master",
    "defaults": "webpack-defaults",
    "lint": "npm-run-all -l -p \"lint:**\"",
    "lint:js": "eslint --cache .",
    "lint:prettier": "prettier --list-different .",
    "prebuild": "npm run clean",
    "prepare": "npm run build",
    "pretest": "npm run lint",
    "release": "standard-version",
    "security": "npm audit",
    "start": "npm run build -- -w",
    "test": "npm run test:coverage",
    "test:coverage": "npm run test:only -- --collectCoverageFrom=\"src/**/*.js\" --coverage",
    "test:only": "cross-env NODE_ENV=test jest",
    "test:watch": "npm run test:only -- --watch"
  },
  "version": "6.2.0"
}
